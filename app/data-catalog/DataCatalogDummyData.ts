import { DummyCategories } from "./DataCatalogDummyCategories"
import { Resource } from "./DataCatalogTypes"

export const DataCatalogDummyData: Resource[] = [
	{
		id: "1",
		title: "Global Climate Data API",
		abstract: "Provides access to historical and real-time climate data.",
		type: "API",
		html_content: "<p>API for retrieving climate data globally.</p>",
		openapi_url: "https://api.example.com/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/climate-api",
		documentation_url: "https://docs.example.com/climate-api",
		update_frequency: "Daily",
		release_date: "2023-01-15",
		client_library: true,
		keywords: ["climate", "weather", "temperature"],
		version: "1.2.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [
			{
				id: "3",
				title: "Flood Prediction ML Model",
				abstract: "A machine learning model for predicting flood events.",
				type: "ML Model",
			},
		],
		providers: [
			{
				id: "nasa",
				name: "NASA",
				description: "Space agency providing climate data",
				url: "https://nasa.gov",
			},
		],
		useExamples: [
			{
				id: "ex1",
				title: "Fetching daily temperature",
				description: "Example of retrieving daily temperature from the API.",
				example_url: "https://docs.example.com/climate-api#example",
			},
		],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all continents",
				spatialResolution: "10km",
			},
		],
		codeExamples: [
			{
				id: "code1",
				title: "Python API Client",
				description: "Python script to access climate data",
				code: [
					{
						id: "py1",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/climate")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[4], DummyCategories[0]],
	},
	{
		id: "2",
		title: "Landsat Satellite Imagery",
		abstract: "High-resolution satellite images from NASA’s Landsat program.",
		type: "Dataset",
		html_content: "<p>Access to Landsat imagery from 1972 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/landsat",
		github_url: undefined,
		documentation_url: "https://docs.example.com/landsat",
		update_frequency: "Monthly",
		release_date: "2019-06-30",
		client_library: false,
		keywords: ["satellite", "imagery", "NASA", "Landsat"],
		version: "3.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [
			{
				id: "3",
				title: "Flood Prediction ML Model",
				abstract: "A machine learning model for predicting flood events.",
				type: "ML Model",
			},
		],
		providers: [
			{
				id: "usgs",
				name: "US Geological Survey",
				description: "Provides satellite imagery data",
				url: "https://usgs.gov",
			},
		],
		useExamples: [
			{
				id: "ex2",
				title: "Downloading Landsat imagery",
				description: "How to download Landsat images from the dataset.",
				example_url: "https://docs.example.com/landsat#download",
			},
		],
		spatialExtent: [
			{
				id: "us",
				type: "Region",
				region: "United States",
				details: "Covers continental US",
				geometry: [
					{
						type: "Feature",
						properties: {},
						geometry: {
							type: "Polygon",
							coordinates: [
								[
									[-125, 50],
									[-65, 50],
									[-65, 25],
									[-125, 25],
									[-125, 50],
								],
							],
						},
					},
				],
				spatialResolution: "30m",
			},
		],
		codeExamples: [
			{
				id: "code2",
				title: "Downloading Landsat Images with Python",
				description: "Python script for downloading Landsat imagery",
				code: [
					{
						id: "py2",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/landsat/download")\nprint(response.content)`,
					},
				],
			},
		],
		categories: [DummyCategories[0], DummyCategories[1]],
	},
	{
		id: "3",
		title: "Flood Prediction ML Model",
		abstract: "A machine learning model for predicting flood events.",
		type: "ML Model",
		html_content: "<p>AI-powered flood forecasting model.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/flood-predict",
		github_url: "https://github.com/example/flood-ml",
		documentation_url: "https://docs.example.com/flood-ml",
		update_frequency: "Quarterly",
		release_date: "2022-11-10",
		client_library: true,
		keywords: ["flood", "machine learning", "prediction"],
		version: "2.1",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [
			{
				id: "1",
				title: "Global Climate Data API",
				abstract: "Provides access to historical and real-time climate data.",
				type: "API",
			},
			{
				id: "2",
				title: "Landsat Satellite Imagery",
				abstract:
					"High-resolution satellite images from NASA’s Landsat program.",
				type: "Dataset",
			},
		],
		usedBy: [],
		providers: [
			{
				id: "noaa",
				name: "NOAA",
				description: "Weather and environmental data provider",
				url: "https://noaa.gov",
			},
		],
		useExamples: [
			{
				id: "ex3",
				title: "Running the flood prediction model",
				description: "Example usage of the flood prediction model.",
				example_url: "https://docs.example.com/flood-ml#usage",
			},
		],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Predicts floods worldwide",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code3",
				title: "Using the flood prediction API",
				description: "Python code to predict floods",
				code: [
					{
						id: "py3",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/flood-predict", json={"location": "New York"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[12], DummyCategories[0]],
	},
	{
		id: "4",
		title: "Air Quality Index API",
		abstract: "Provides real-time air quality data from multiple sources.",
		type: "API",
		html_content: "<p>Access global air quality index data.</p>",
		openapi_url: "https://api.example.com/aqi/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/aqi-api",
		documentation_url: "https://docs.example.com/aqi-api",
		update_frequency: "Hourly",
		release_date: "2021-05-20",
		client_library: true,
		keywords: ["air quality", "pollution", "AQI"],
		version: "1.0.3",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "who",
				name: "World Health Organization",
				description: "Global air quality monitoring",
				url: "https://who.int",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers major cities worldwide",
				spatialResolution: "5km",
			},
		],
		codeExamples: [
			{
				id: "code4",
				title: "Python AQI Data Fetch",
				description: "Fetch AQI data using Python.",
				code: [
					{
						id: "py4",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/aqi")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[10], DummyCategories[4]],
	},
	{
		id: "5",
		title: "Earthquake Monitoring API",
		abstract: "Tracks real-time earthquake activity globally.",
		type: "API",
		html_content: "<p>Real-time earthquake monitoring API.</p>",
		openapi_url: "https://api.example.com/earthquake/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/earthquake-api",
		documentation_url: "https://docs.example.com/earthquake-api",
		update_frequency: "Real-time",
		release_date: "2020-08-14",
		client_library: false,
		keywords: ["earthquake", "seismic", "USGS"],
		version: "2.1.5",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "usgs",
				name: "US Geological Survey",
				description: "Seismic data provider",
				url: "https://earthquake.usgs.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers earthquake-prone areas",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code5",
				title: "Fetching Earthquake Data",
				description: "Retrieve earthquake activity updates.",
				code: [
					{
						id: "py5",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/earthquake")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[12]],
	},
	{
		id: "6",
		title: "Wildfire Detection API",
		abstract: "Provides real-time wildfire detection data.",
		type: "API",
		html_content: "<p>Access wildfire detection data from various sources.</p>",
		openapi_url: "https://api.example.com/wildfire/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/wildfire-api",
		documentation_url: "https://docs.example.com/wildfire-api",
		update_frequency: "Hourly",
		release_date: "2021-07-15",
		client_library: true,
		keywords: ["wildfire", "fire", "detection"],
		version: "1.0.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "nifc",
				name: "National Interagency Fire Center",
				description: "Wildfire data provider",
				url: "https://nifc.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "us-west",
				type: "Region",
				region: "Western United States",
				details: "Covers areas prone to wildfires",
				geometry: [
					{
						type: "Feature",
						properties: {},
						geometry: {
							type: "Polygon",
							coordinates: [
								[
									[-125, 50],
									[-65, 50],
									[-65, 25],
									[-125, 25],
									[-125, 50],
								],
							],
						},
					},
				],
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code6",
				title: "Fetching Wildfire Data",
				description: "Retrieve wildfire detection data.",
				code: [
					{
						id: "py6",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/wildfire")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[12], DummyCategories[1]],
	},
	{
		id: "7",
		title: "Traffic Flow API",
		abstract: "Provides real-time traffic flow data.",
		type: "API",
		html_content: "<p>Access traffic flow data for major cities.</p>",
		openapi_url: "https://api.example.com/traffic/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/traffic-api",
		documentation_url: "https://docs.example.com/traffic-api",
		update_frequency: "Real-time",
		release_date: "2022-03-01",
		client_library: true,
		keywords: ["traffic", "flow", "transportation"],
		version: "2.0.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "dot",
				name: "Department of Transportation",
				description: "Traffic data provider",
				url: "https://dot.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "urban",
				type: "Region",
				region: "Urban Areas",
				details: "Covers major urban centers",
				geometry: [
					{
						type: "Feature",
						properties: {},
						geometry: {
							type: "Polygon",
							coordinates: [
								[
									[-125, 50],
									[-65, 50],
									[-65, 25],
									[-125, 25],
									[-125, 50],
								],
							],
						},
					},
				],
				spatialResolution: "500m",
			},
		],
		codeExamples: [
			{
				id: "code7",
				title: "Fetching Traffic Data",
				description: "Retrieve real-time traffic flow data.",
				code: [
					{
						id: "py7",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/traffic")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[11]],
	},
	{
		id: "8",
		title: "Ocean Temperature Dataset",
		abstract: "Historical ocean temperature data from various sources.",
		type: "Dataset",
		html_content: "<p>Access ocean temperature data from 2000 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/ocean-temperature",
		github_url: undefined,
		documentation_url: "https://docs.example.com/ocean-temperature",
		update_frequency: "Monthly",
		release_date: "2020-01-10",
		client_library: false,
		keywords: ["ocean", "temperature", "dataset"],
		version: "1.5",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "noaa",
				name: "NOAA",
				description: "Oceanographic data provider",
				url: "https://noaa.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all oceans",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code8",
				title: "Accessing Ocean Temperature Data",
				description: "Python script to access ocean temperature data.",
				code: [
					{
						id: "py8",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/ocean-temperature")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[5]],
	},
	{
		id: "9",
		title: "Global Population Dataset",
		abstract: "Global population data from various sources.",
		type: "Dataset",
		html_content: "<p>Access population data from 1960 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/population",
		github_url: undefined,
		documentation_url: "https://docs.example.com/population",
		update_frequency: "Annual",
		release_date: "2020-05-25",
		client_library: false,
		keywords: ["population", "demographics", "dataset"],
		version: "2.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "un",
				name: "United Nations",
				description: "Population data provider",
				url: "https://un.org",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all countries",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code9",
				title: "Accessing Population Data",
				description: "Python script to access population data.",
				code: [
					{
						id: "py9",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/population")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[9], DummyCategories[10]],
	},
	{
		id: "10",
		title: "COVID-19 Data API",
		abstract: "Provides real-time COVID-19 data.",
		type: "API",
		html_content: "<p>Access COVID-19 case and vaccination data.</p>",
		openapi_url: "https://api.example.com/covid/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/covid-api",
		documentation_url: "https://docs.example.com/covid-api",
		update_frequency: "Daily",
		release_date: "2020-03-15",
		client_library: true,
		keywords: ["COVID-19", "health", "API"],
		version: "1.0.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "who",
				name: "World Health Organization",
				description: "Health data provider",
				url: "https://who.int",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all countries",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code10",
				title: "Fetching COVID-19 Data",
				description: "Retrieve COVID-19 data using Python.",
				code: [
					{
						id: "py10",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/covid")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[9], DummyCategories[3]],
	},
	{
		id: "11",
		title: "Renewable Energy Dataset",
		abstract: "Global renewable energy production data.",
		type: "Dataset",
		html_content: "<p>Access renewable energy data from 2000 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/renewable-energy",
		github_url: undefined,
		documentation_url: "https://docs.example.com/renewable-energy",
		update_frequency: "Annual",
		release_date: "2021-01-01",
		client_library: false,
		keywords: ["renewable energy", "dataset", "sustainability"],
		version: "1.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "iea",
				name: "International Energy Agency",
				description: "Energy data provider",
				url: "https://iea.org",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all countries",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code11",
				title: "Accessing Renewable Energy Data",
				description: "Python script to access renewable energy data.",
				code: [
					{
						id: "py11",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/renewable-energy")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[7]],
	},
	{
		id: "12",
		title: "Climate Change Impact Model",
		abstract: "Machine learning model predicting climate change impacts.",
		type: "ML Model",
		html_content: "<p>AI model for predicting climate change effects.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/climate-change",
		github_url: "https://github.com/example/climate-change-model",
		documentation_url: "https://docs.example.com/climate-change",
		update_frequency: "Quarterly",
		release_date: "2021-08-01",
		client_library: true,
		keywords: ["climate change", "machine learning", "model"],
		version: "1.0",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "ipcc",
				name: "Intergovernmental Panel on Climate Change",
				description: "Climate data provider",
				url: "https://ipcc.ch",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code12",
				title: "Using Climate Change Model",
				description: "Python code to use the climate change model.",
				code: [
					{
						id: "py12",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/climate-change", json={"data": "sample"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[4], DummyCategories[0]],
	},
	{
		id: "13",
		title: "Soil Moisture Dataset",
		abstract: "Global soil moisture data from various sources.",
		type: "Dataset",
		html_content: "<p>Access soil moisture data from 2000 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/soil-moisture",
		github_url: undefined,
		documentation_url: "https://docs.example.com/soil-moisture",
		update_frequency: "Monthly",
		release_date: "2021-02-15",
		client_library: false,
		keywords: ["soil moisture", "dataset", "agriculture"],
		version: "1.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "usda",
				name: "US Department of Agriculture",
				description: "Agricultural data provider",
				url: "https://usda.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code13",
				title: "Accessing Soil Moisture Data",
				description: "Python script to access soil moisture data.",
				code: [
					{
						id: "py13",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/soil-moisture")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[0], DummyCategories[9]],
	},
	{
		id: "14",
		title: "Urban Heat Island Effect Model",
		abstract: "Predicts urban heat island effects using ML.",
		type: "ML Model",
		html_content: "<p>AI model for predicting urban heat effects.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/urban-heat",
		github_url: "https://github.com/example/urban-heat-model",
		documentation_url: "https://docs.example.com/urban-heat",
		update_frequency: "Quarterly",
		release_date: "2022-05-01",
		client_library: true,
		keywords: ["urban heat", "machine learning", "model"],
		version: "1.0",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "nasa",
				name: "NASA",
				description: "Space agency providing climate data",
				url: "https://nasa.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "urban",
				type: "Region",
				region: "Urban Areas",
				details: "Covers major urban centers",
				geometry: [
					{
						type: "Feature",
						properties: {},
						geometry: {
							type: "Polygon",
							coordinates: [
								[
									[-125, 50],
									[-65, 50],
									[-65, 25],
									[-125, 25],
									[-125, 50],
								],
							],
						},
					},
				],
				spatialResolution: "500m",
			},
		],
		codeExamples: [
			{
				id: "code14",
				title: "Using Urban Heat Model",
				description: "Python code to use the urban heat model.",
				code: [
					{
						id: "py14",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/urban-heat", json={"data": "sample"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[12], DummyCategories[4]],
	},
	{
		id: "15",
		title: "Weather Forecast API",
		abstract: "Provides weather forecasts for various locations.",
		type: "API",
		html_content: "<p>Access weather forecasts globally.</p>",
		openapi_url: "https://api.example.com/weather/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/weather-api",
		documentation_url: "https://docs.example.com/weather-api",
		update_frequency: "Hourly",
		release_date: "2021-09-15",
		client_library: true,
		keywords: ["weather", "forecast", "API"],
		version: "1.0.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "noaa",
				name: "NOAA",
				description: "Weather data provider",
				url: "https://noaa.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all countries",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code15",
				title: "Fetching Weather Data",
				description: "Retrieve weather forecasts using Python.",
				code: [
					{
						id: "py15",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/weather")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[4], DummyCategories[3]],
	},
	{
		id: "16",
		title: "Biodiversity Dataset",
		abstract: "Global biodiversity data from various sources.",
		type: "Dataset",
		html_content: "<p>Access biodiversity data from 2000 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/biodiversity",
		github_url: undefined,
		documentation_url: "https://docs.example.com/biodiversity",
		update_frequency: "Annual",
		release_date: "2021-12-01",
		client_library: false,
		keywords: ["biodiversity", "dataset", "ecology"],
		version: "1.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "gbif",
				name: "Global Biodiversity Information Facility",
				description: "Biodiversity data provider",
				url: "https://gbif.org",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code16",
				title: "Accessing Biodiversity Data",
				description: "Python script to access biodiversity data.",
				code: [
					{
						id: "py16",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/biodiversity")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[0], DummyCategories[2]],
	},
	{
		id: "17",
		title: "Air Pollution Model",
		abstract: "Machine learning model predicting air pollution levels.",
		type: "ML Model",
		html_content: "<p>AI model for predicting air quality levels.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/air-pollution",
		github_url: "https://github.com/example/air-pollution-model",
		documentation_url: "https://docs.example.com/air-pollution",
		update_frequency: "Quarterly",
		release_date: "2022-06-01",
		client_library: true,
		keywords: ["air pollution", "machine learning", "model"],
		version: "1.0",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "epa",
				name: "Environmental Protection Agency",
				description: "Environmental data provider",
				url: "https://epa.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "urban",
				type: "Region",
				region: "Urban Areas",
				details: "Covers major cities",
				geometry: [
					{
						type: "Feature",
						properties: {},
						geometry: {
							type: "Polygon",
							coordinates: [
								[
									[-125, 50],
									[-65, 50],
									[-65, 25],
									[-125, 25],
									[-125, 50],
								],
							],
						},
					},
				],
				spatialResolution: "500m",
			},
		],
		codeExamples: [
			{
				id: "code17",
				title: "Using Air Pollution Model",
				description: "Python code to use the air pollution model.",
				code: [
					{
						id: "py17",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/air-pollution", json={"data": "sample"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[1], DummyCategories[3]],
	},
	{
		id: "18",
		title: "Flood Risk Dataset",
		abstract: "Global flood risk data from various sources.",
		type: "Dataset",
		html_content: "<p>Access flood risk data from 2000 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/flood-risk",
		github_url: undefined,
		documentation_url: "https://docs.example.com/flood-risk",
		update_frequency: "Annual",
		release_date: "2021-11-01",
		client_library: false,
		keywords: ["flood risk", "dataset", "disaster management"],
		version: "1.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "fema",
				name: "Federal Emergency Management Agency",
				description: "Disaster management data provider",
				url: "https://fema.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code18",
				title: "Accessing Flood Risk Data",
				description: "Python script to access flood risk data.",
				code: [
					{
						id: "py18",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/flood-risk")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[6]],
	},
	{
		id: "19",
		title: "Hurricane Tracking API",
		abstract: "Provides real-time hurricane tracking data.",
		type: "API",
		html_content: "<p>Access hurricane tracking data from various sources.</p>",
		openapi_url: "https://api.example.com/hurricane/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/hurricane-api",
		documentation_url: "https://docs.example.com/hurricane-api",
		update_frequency: "Real-time",
		release_date: "2021-08-20",
		client_library: true,
		keywords: ["hurricane", "tracking", "API"],
		version: "1.0.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "nws",
				name: "National Weather Service",
				description: "Weather data provider",
				url: "https://weather.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "atlantic",
				type: "Region",
				region: "Atlantic Ocean",
				details: "Covers hurricane-prone areas",
				geometry: [
					{
						type: "Feature",
						properties: {},
						geometry: {
							type: "Polygon",
							coordinates: [
								[
									[-125, 50],
									[-65, 50],
									[-65, 25],
									[-125, 25],
									[-125, 50],
								],
							],
						},
					},
				],
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code19",
				title: "Fetching Hurricane Data",
				description: "Retrieve hurricane tracking data.",
				code: [
					{
						id: "py19",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/hurricane")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[13]],
	},
	{
		id: "20",
		title: "Seismic Activity Dataset",
		abstract: "Global seismic activity data from various sources.",
		type: "Dataset",
		html_content: "<p>Access seismic activity data from 2000 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/seismic-activity",
		github_url: undefined,
		documentation_url: "https://docs.example.com/seismic-activity",
		update_frequency: "Monthly",
		release_date: "2021-03-01",
		client_library: false,
		keywords: ["seismic", "earthquake", "dataset"],
		version: "1.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "usgs",
				name: "US Geological Survey",
				description: "Seismic data provider",
				url: "https://earthquake.usgs.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code20",
				title: "Accessing Seismic Activity Data",
				description: "Python script to access seismic activity data.",
				code: [
					{
						id: "py20",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/seismic-activity")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[8], DummyCategories[2]],
	},
	{
		id: "21",
		title: "Ocean Acidification Model",
		abstract: "Predicts ocean acidification levels using ML.",
		type: "ML Model",
		html_content: "<p>AI model for predicting ocean acidification.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/ocean-acidification",
		github_url: "https://github.com/example/ocean-acidification-model",
		documentation_url: "https://docs.example.com/ocean-acidification",
		update_frequency: "Quarterly",
		release_date: "2022-02-01",
		client_library: true,
		keywords: ["ocean acidification", "machine learning", "model"],
		version: "1.0",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "noaa",
				name: "NOAA",
				description: "Oceanographic data provider",
				url: "https://noaa.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all oceans",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code21",
				title: "Using Ocean Acidification Model",
				description: "Python code to use the ocean acidification model.",
				code: [
					{
						id: "py21",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/ocean-acidification", json={"data": "sample"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[7], DummyCategories[10]],
	},
	{
		id: "22",
		title: "Geospatial Analysis API",
		abstract: "Provides geospatial data analysis services.",
		type: "API",
		html_content: "<p>Access geospatial analysis tools and data.</p>",
		openapi_url: "https://api.example.com/geospatial/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/geospatial-api",
		documentation_url: "https://docs.example.com/geospatial-api",
		update_frequency: "Weekly",
		release_date: "2021-04-10",
		client_library: true,
		keywords: ["geospatial", "analysis", "API"],
		version: "1.0.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "esri",
				name: "Esri",
				description: "Geospatial data provider",
				url: "https://esri.com",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code22",
				title: "Using Geospatial Analysis API",
				description: "Python code to use the geospatial analysis API.",
				code: [
					{
						id: "py22",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/geospatial")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[11], DummyCategories[9]],
	},
	{
		id: "23",
		title: "Climate Data Visualization Tool",
		abstract: "Tool for visualizing climate data.",
		type: "ML Model",
		html_content: "<p>AI tool for climate data visualization.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/climate-visualization",
		github_url: "https://github.com/example/climate-visualization",
		documentation_url: "https://docs.example.com/climate-visualization",
		update_frequency: "Monthly",
		release_date: "2022-09-01",
		client_library: true,
		keywords: ["climate", "visualization", "tool"],
		version: "1.0",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "climate.gov",
				name: "Climate Data Agency",
				description: "Climate data provider",
				url: "https://climate.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code23",
				title: "Using Climate Visualization Tool",
				description: "Python code to use the climate visualization tool.",
				code: [
					{
						id: "py23",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/climate-visualization", json={"data": "sample"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[13], DummyCategories[0]],
	},
	{
		id: "24",
		title: "Vegetation Index Dataset",
		abstract: "Global vegetation index data from various sources.",
		type: "Dataset",
		html_content: "<p>Access vegetation index data from 2000 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/vegetation-index",
		github_url: undefined,
		documentation_url: "https://docs.example.com/vegetation-index",
		update_frequency: "Annual",
		release_date: "2021-10-01",
		client_library: false,
		keywords: ["vegetation", "index", "dataset"],
		version: "1.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "nasa",
				name: "NASA",
				description: "Vegetation data provider",
				url: "https://nasa.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code24",
				title: "Accessing Vegetation Index Data",
				description: "Python script to access vegetation index data.",
				code: [
					{
						id: "py24",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/vegetation-index")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[14], DummyCategories[5]],
	},
	{
		id: "25",
		title: "Ecosystem Services Model",
		abstract: "Predicts ecosystem services using ML.",
		type: "ML Model",
		html_content: "<p>AI model for predicting ecosystem services.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/ecosystem-services",
		github_url: "https://github.com/example/ecosystem-services-model",
		documentation_url: "https://docs.example.com/ecosystem-services",
		update_frequency: "Quarterly",
		release_date: "2022-04-01",
		client_library: true,
		keywords: ["ecosystem", "services", "machine learning"],
		version: "1.0",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "undp",
				name: "United Nations Development Programme",
				description: "Ecosystem data provider",
				url: "https://undp.org",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code25",
				title: "Using Ecosystem Services Model",
				description: "Python code to use the ecosystem services model.",
				code: [
					{
						id: "py25",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/ecosystem-services", json={"data": "sample"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[2], DummyCategories[9]],
	},
	{
		id: "26",
		title: "Smart Agriculture API",
		abstract: "Provides data and tools for smart agriculture.",
		type: "API",
		html_content: "<p>Access smart agriculture tools and data.</p>",
		openapi_url: "https://api.example.com/agriculture/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/agriculture-api",
		documentation_url: "https://docs.example.com/agriculture-api",
		update_frequency: "Weekly",
		release_date: "2021-04-15",
		client_library: true,
		keywords: ["agriculture", "smart", "API"],
		version: "1.0.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "usda",
				name: "US Department of Agriculture",
				description: "Agricultural data provider",
				url: "https://usda.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code26",
				title: "Using Smart Agriculture API",
				description: "Python code to use the smart agriculture API.",
				code: [
					{
						id: "py26",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/agriculture")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[3], DummyCategories[1]],
	},
	{
		id: "27",
		title: "Marine Biodiversity Dataset",
		abstract: "Global marine biodiversity data from various sources.",
		type: "Dataset",
		html_content:
			"<p>Access marine biodiversity data from 2000 to present.</p>",
		openapi_url: undefined,
		download_url: "https://data.example.com/marine-biodiversity",
		github_url: undefined,
		documentation_url: "https://docs.example.com/marine-biodiversity",
		update_frequency: "Annual",
		release_date: "2021-11-15",
		client_library: false,
		keywords: ["marine", "biodiversity", "dataset"],
		version: "1.0",
		license: {
			id: "cc-by",
			name: "Creative Commons Attribution",
			description: "Allows use with attribution",
			url: "https://creativecommons.org/licenses/by/4.0/",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "gbif",
				name: "Global Biodiversity Information Facility",
				description: "Marine biodiversity data provider",
				url: "https://gbif.org",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all oceans",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code27",
				title: "Accessing Marine Biodiversity Data",
				description: "Python script to access marine biodiversity data.",
				code: [
					{
						id: "py27",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://data.example.com/marine-biodiversity")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[6], DummyCategories[8]],
	},
	{
		id: "28",
		title: "Carbon Footprint Model",
		abstract: "Predicts carbon footprint using ML.",
		type: "ML Model",
		html_content: "<p>AI model for predicting carbon emissions.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/carbon-footprint",
		github_url: "https://github.com/example/carbon-footprint-model",
		documentation_url: "https://docs.example.com/carbon-footprint",
		update_frequency: "Quarterly",
		release_date: "2022-07-01",
		client_library: true,
		keywords: ["carbon footprint", "machine learning", "model"],
		version: "1.0",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "epa",
				name: "Environmental Protection Agency",
				description: "Environmental data provider",
				url: "https://epa.gov",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code28",
				title: "Using Carbon Footprint Model",
				description: "Python code to use the carbon footprint model.",
				code: [
					{
						id: "py28",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/carbon-footprint", json={"data": "sample"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[10], DummyCategories[9]],
	},
	{
		id: "29",
		title: "Climate Resilience Model",
		abstract: "Predicts climate resilience using ML.",
		type: "ML Model",
		html_content: "<p>AI model for assessing climate resilience.</p>",
		openapi_url: undefined,
		download_url: "https://models.example.com/climate-resilience",
		github_url: "https://github.com/example/climate-resilience-model",
		documentation_url: "https://docs.example.com/climate-resilience",
		update_frequency: "Quarterly",
		release_date: "2022-08-01",
		client_library: true,
		keywords: ["climate resilience", "machine learning", "model"],
		version: "1.0",
		license: {
			id: "apache-2.0",
			name: "Apache License 2.0",
			description: "Open-source license with permissive terms",
			url: "https://www.apache.org/licenses/LICENSE-2.0",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "unep",
				name: "United Nations Environment Programme",
				description: "Climate data provider",
				url: "https://unep.org",
			},
		],
		useExamples: [],
		spatialExtent: [
			{
				id: "global",
				type: "Global",
				details: "Covers all regions",
				spatialResolution: "1km",
			},
		],
		codeExamples: [
			{
				id: "code29",
				title: "Using Climate Resilience Model",
				description: "Python code to use the climate resilience model.",
				code: [
					{
						id: "py29",
						language: "Python",
						code: `import requests\nresponse = requests.post("https://models.example.com/climate-resilience", json={"data": "sample"})\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[11], DummyCategories[7]],
	},
	{
		id: "30",
		title: "Water Quality Index API",
		abstract: "Provides real-time water quality data.",
		type: "API",
		html_content: "<p>Access real-time water quality index data.</p>",
		openapi_url: "https://api.example.com/water-quality/openapi.json",
		download_url: undefined,
		github_url: "https://github.com/example/water-quality-api",
		documentation_url: "https://docs.example.com/water-quality-api",
		update_frequency: "Hourly",
		release_date: "2021-06-01",
		client_library: true,
		keywords: ["water quality", "pollution", "WQI"],
		version: "1.0.0",
		license: {
			id: "mit",
			name: "MIT License",
			description: "A permissive open-source license",
			url: "https://opensource.org/licenses/MIT",
		},
		basedOn: [],
		usedBy: [],
		providers: [
			{
				id: "epa",
				name: "Environmental Protection Agency",
				description: "Water quality data provider",
				url: "https://epa.gov",
			},
		],
		useExamples: [],
		codeExamples: [
			{
				id: "code30",
				title: "Fetching Water Quality Data",
				description: "Retrieve water quality data using Python.",
				code: [
					{
						id: "py30",
						language: "Python",
						code: `import requests\nresponse = requests.get("https://api.example.com/water-quality")\nprint(response.json())`,
					},
				],
			},
		],
		categories: [DummyCategories[12], DummyCategories[0]],
	},
]
